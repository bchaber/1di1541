import { timestamp, files, shell } from '@sapper/service-worker';

const ASSETS = `cache${timestamp}`;

// `shell` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const to_cache = shell.concat(files);
const staticAssets = new Set(to_cache);

self.addEventListener('install', event => {
	console.log('[ServiceWorker] Install');
	event.waitUntil(
		caches
			.open(ASSETS)
			.then(cache => cache.addAll(to_cache))
			.then(() => {
				self.skipWaiting();
			})
	);
});

self.addEventListener('activate', event => {
	console.log('[ServiceWorker] Activate');
	event.waitUntil(
		caches.keys().then(async keys => {
			// delete old caches
			for (const key of keys) {
				if (key !== ASSETS) await caches.delete(key);
			}

			self.clients.claim();
		})
	);
});


/**
 * Fetch the asset from the network and store it in the cache. 
 * Fall back to the cache if the user is offline.
 */
async function fetchAndCache(request) {
	const cache = await caches.open(`offline${timestamp}`)

	try {
		const response = await fetch(request);
		cache.put(request, response.clone());
		return response;
	} catch (err) {
		const response = await cache.match(request);
		if (response) return response;

		throw err;
	}
}

self.addEventListener('fetch', event => {
	console.log('[ServiceWorker] Fetch', event.request.url);
	
	if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

	const url = new URL(event.request.url);

	// don't try to handle e.g. data: URIs
	const isHttp = url.protocol.startsWith('http');
	const isDevServerRequest = url.hostname === self.location.hostname && url.port !== self.location.port;
	const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
	const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

	if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
		event.respondWith(
			(async () => {
				// always serve static files and bundler-generated assets from cache.
				// if your application has other URLs with data that will never change,
				// set this variable to true for them and they will only be fetched once.
				const cachedAsset = isStaticAsset && await caches.match(event.request);

				return cachedAsset || fetchAndCache(event.request);
			})()
		);
	}
});

// based on: http://github.com/mdn/serviceworker-cookbook/tree/master/request-deferrer
function tryOrFallback(fakeResponse) {
	return function(req, res) {
		// If offline, enqueue and answer with the fake response.
		if (!navigator.onLine) {
			console.log('[ServiceWorker] No network availability, enqueuing');
			return enqueue(req).then(function() {
				// As the fake response will be reused but Response objects
				// are one use only, we need to clone it each time we use it.
				return fakeResponse.clone();
			});
		}
		
		// If online, flush the queue and answer from network.
		console.log('[ServiceWorker] Network available! Flushing queue.');
		return flushQueue().then(function() {
			return fetch(req);
		});
	};
}

// Serialize is a little bit convolved due to headers is not a simple object.
function serialize(request) {
	var headers = {};
	// `for(... of ...)` is ES6 notation but current browsers supporting SW, support this
	// notation as well and this is the only way of retrieving all the headers.
	for (var entry of request.headers.entries()) {
		headers[entry[0]] = entry[1];
	}
	var serialized = {
		url: request.url,
		headers: headers,
		method: request.method,
		mode: request.mode,
		credentials: request.credentials,
		cache: request.cache,
		redirect: request.redirect,
		referrer: request.referrer
	};
	
	// Only if method is not `GET` or `HEAD` is the request allowed to have body.
	if (request.method !== 'GET' && request.method !== 'HEAD') {
		return request.clone().text().then(function(body) {
			serialized.body = body;
			return Promise.resolve(serialized);
		});
	}
	return Promise.resolve(serialized);
}

function deserialize(data) {
	return Promise.resolve(new Request(data.url, data));
}

// Enqueue consists of adding a request to the list. Due to the
// limitations of IndexedDB, Request and Response objects can not
// be saved so we need an alternative representations. This is
// why we call to `serialize()`.`
function enqueue(request) {
	return serialize(request).then(function(serialized) {
		localforage.getItem('queue').then(function(queue) {
			/* eslint no-param-reassign: 0 */
			queue = queue || [];
			queue.push(serialized);
			return localforage.setItem('queue', queue).then(function() {
				console.log(serialized.method, serialized.url, 'enqueued!');
			});
		});
	});
}

// Flush is a little more complicated. It consists of getting
// the elements of the queue in order and sending each one,
// keeping track of not yet sent request. Before sending a request
// we need to recreate it from the alternative representation
// stored in IndexedDB.
function flushQueue() {
	return localforage.getItem('queue').then(function(queue) {
		/* eslint no-param-reassign: 0 */
		queue = queue || [];
		
		// If empty, nothing to do!
		if (!queue.length) {
			return Promise.resolve();
		}
		
		// Else, send the requests in order...
		console.log('Sending ', queue.length, ' requests...');
		return sendInOrder(queue).then(function() {
			// **Requires error handling**. Actually, this is assuming all the requests
			// in queue are a success when reaching the Network. So it should empty the
			// queue step by step, only popping from the queue if the request completes
			// with success.
			return localforage.setItem('queue', []);
		});
	});
}

// Send the requests inside the queue in order. Waiting for the current before
// sending the next one.
function sendInOrder(requests) {
	// The `reduce()` chains one promise per serialized request, not allowing to
	// progress to the next one until completing the current.
	var sending = requests.reduce(function(prevPromise, serialized) {
		console.log('[ServiceWorker] Sending', serialized.method, serialized.url);
		return prevPromise.then(function() {
			return deserialize(serialized).then(function(request) {
				return fetch(request);
			});
		});
	}, Promise.resolve());
	return sending;
}